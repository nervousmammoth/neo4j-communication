services:
  # ==============================================================================
  # Neo4j Database
  # ==============================================================================
  neo4j:
    image: neo4j:5-community
    container_name: neo4j-communication-db
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/OTJzELVAiGcsE915L7XQv41pkuOlGcI8
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_memory_pagecache_size=512M
      - NEO4J_dbms_memory_heap_initial__size=512M
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_dbms_security_auth__max__failed__attempts=0
      - NEO4J_dbms_security_auth__lock__time=0s
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - neo4j-communication-network

  # ==============================================================================
  # Neo4j Communication Frontend (Next.js)
  # ==============================================================================
  neo4j-communication-frontend:
    # For production: Pull from Docker Hub
    # Replace 'nervousmammoth2' with your Docker Hub username
    image: ${DOCKER_USERNAME:-nervousmammoth2}/neo4j-communication:${IMAGE_TAG:-latest}

    # For local development: Build from source
    # Uncomment the following lines and comment out 'image' above to build locally
    # build:
    #   context: ../frontend
    #   dockerfile: Dockerfile

    container_name: neo4j-communication-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Neo4j connection (using container name as hostname)
      - NEO4J_01_URI=bolt://neo4j:7687
      - NEO4J_01_USER=neo4j
      - NEO4J_01_PASSWORD=OTJzELVAiGcsE915L7XQv41pkuOlGcI8
      - NEXT_PUBLIC_APP_NAME=neo4j-communication
      - NODE_ENV=production
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - neo4j-communication-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      # Enable Watchtower for this container
      - "com.centurylinklabs.watchtower.enable=true"

  # ==============================================================================
  # Watchtower - Automatic Container Updates (STAGING/DEV ONLY)
  # ==============================================================================
  # Automatically pulls and deploys new images from Docker Hub
  #
  # ⚠️ WARNING: Do NOT use in production! Use manual deployment instead.
  #
  # Usage:
  #   Staging/Dev:  docker compose --profile watchtower up -d
  #   Production:   docker compose up -d (Watchtower won't start)
  #
  # How it works:
  #   - Checks Docker Hub every 5 minutes for new images
  #   - Automatically pulls and recreates containers with new versions
  #   - Rolling restart ensures zero downtime
  #   - Cleans up old images to save disk space
  # ==============================================================================
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    profiles:
      - watchtower  # Only starts when explicitly enabled
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      # Only monitor containers with the watchtower label
      - WATCHTOWER_LABEL_ENABLE=true
      # Check for updates every 5 minutes (300 seconds)
      - WATCHTOWER_POLL_INTERVAL=300
      # Remove old images after updating
      - WATCHTOWER_CLEANUP=true
      # Enable rolling restart (zero downtime)
      - WATCHTOWER_ROLLING_RESTART=true
      # Don't update stopped containers
      - WATCHTOWER_INCLUDE_STOPPED=false
      # Enable notifications (optional - uncomment to enable)
      # - WATCHTOWER_NOTIFICATIONS=shoutrrr
      # - WATCHTOWER_NOTIFICATION_URL=slack://token@channel
      # Run once at startup then on schedule (not continuous)
      - WATCHTOWER_RUN_ONCE=false
      # Enable debug logging
      - WATCHTOWER_DEBUG=false
    restart: unless-stopped
    networks:
      - neo4j-communication-network
    depends_on:
      - neo4j-communication-frontend

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:

networks:
  neo4j-communication-network:
    driver: bridge