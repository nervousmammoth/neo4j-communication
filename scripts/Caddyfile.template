# Neo4j Communication Caddyfile Template
#
# This template shows the Caddy reverse proxy configuration for Neo4j Communication.
# The actual Caddyfile is auto-generated by setup-caddy-proxy.sh
#
# Location: /etc/caddy/Caddyfile (when deployed)

# =============================================================================
# OPTION 1: IP Address Only (HTTP)
# =============================================================================
# Use this for on-premise deployments without a domain name.
# Caddy will accept traffic on any IP address the server has.

:80 {
    # Reverse proxy to Next.js frontend
    reverse_proxy localhost:3000

    # Preserve client information in headers
    header_up X-Real-IP {remote_host}
    header_up X-Forwarded-For {remote_host}
    header_up X-Forwarded-Proto {scheme}

    # Enable access logging
    log {
        output file /var/log/caddy/neo4j-communication-access.log
        format json
    }

    # Custom error handling
    handle_errors {
        respond "{err.status_code} {err.status_text}"
    }
}

# =============================================================================
# OPTION 2: Domain Name with Automatic HTTPS (Production)
# =============================================================================
# Uncomment and customize for production deployments with a domain.
# Caddy will automatically obtain and renew Let's Encrypt SSL certificates.

# neo4j-communication.example.com {
#     # Reverse proxy to Next.js frontend
#     reverse_proxy localhost:3000
#
#     # Preserve client information
#     header_up X-Real-IP {remote_host}
#     header_up X-Forwarded-For {remote_host}
#     header_up X-Forwarded-Proto {scheme}
#
#     # Enable access logging
#     log {
#         output file /var/log/caddy/neo4j-communication-access.log
#         format json
#     }
#
#     # Security headers (recommended for production)
#     header {
#         # Enable HSTS
#         Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
#         # Prevent clickjacking
#         X-Frame-Options "SAMEORIGIN"
#         # Prevent MIME sniffing
#         X-Content-Type-Options "nosniff"
#         # Enable XSS protection
#         X-XSS-Protection "1; mode=block"
#     }
#
#     # Custom error handling
#     handle_errors {
#         respond "{err.status_code} {err.status_text}"
#     }
# }

# =============================================================================
# OPTION 3: Multiple Services (Advanced)
# =============================================================================
# Uncomment to expose Neo4j Browser through a subpath (NOT recommended for production)
# Only enable this if you need remote access to Neo4j Browser for debugging.

# :80 {
#     # Main application
#     handle /* {
#         reverse_proxy localhost:3000
#     }
#
#     # Neo4j Browser (WARNING: Requires authentication)
#     handle /neo4j/* {
#         uri strip_prefix /neo4j
#         reverse_proxy localhost:7474
#     }
#
#     # Preserve client information
#     header_up X-Real-IP {remote_host}
#     header_up X-Forwarded-For {remote_host}
#     header_up X-Forwarded-Proto {scheme}
#
#     # Enable logging
#     log {
#         output file /var/log/caddy/neo4j-communication-access.log
#         format json
#     }
# }

# =============================================================================
# Configuration Notes
# =============================================================================
#
# 1. Validate configuration before applying:
#    sudo caddy validate --config /etc/caddy/Caddyfile
#
# 2. Reload configuration without downtime:
#    sudo systemctl reload caddy
#
# 3. View logs:
#    sudo journalctl -u caddy -f
#    sudo tail -f /var/log/caddy/neo4j-communication-access.log
#
# 4. Test configuration:
#    caddy run --config /etc/caddy/Caddyfile
#
# 5. For automatic HTTPS to work:
#    - Domain must point to your server's IP
#    - Ports 80 and 443 must be accessible from internet
#    - Server must be able to reach Let's Encrypt servers
#
# =============================================================================
